{
  "context": {
    "businessContext": "1. 如果变更的代码行数少，则只审核业务含义 —— 根据提交信息，解析对应的 story 名称，然后进行检查。\n2. 根据变更的代码，生成对应的代码信息，作为上下文的一部分。\n3. 如果变更的行数多，则需要进行代码逻辑的检查，以及对应的语法检查。\n4. 如果单次变更的行数过多，则需要进行拆分。\n",
    "fullMessage": "feat(differ): add for handle patches match #8",
    "changes": "--- /dev/null\n+++ b/code-modules/git-differ/src/main/kotlin/cc/unitmesh/cf/code/ChangedLineCount.kt\n@@ -0,0 +1,9 @@\n+package cc.unitmesh.cf.code\n+\n+import kotlinx.serialization.Serializable\n+\n+@Serializable\n+data class ChangedLineCount(\n+    val added: Int,\n+    val deleted: Int,\n+)\n\nindex 0ea0eb4..efb0fda 100644\n--- a/code-modules/git-differ/src/main/kotlin/cc/unitmesh/cf/code/GitDiffer.kt\n+++ b/code-modules/git-differ/src/main/kotlin/cc/unitmesh/cf/code/GitDiffer.kt\n@@ -39,7 +39,7 @@\n     val functionName: String = \"\",\n     val code: String = \"\",\n     val addedLines: Int = 0,\n-    val deletedLines: Int = 0\n+    val deletedLines: Int = 0,\n )\n \n /**\n@@ -108,73 +108,87 @@\n      * @param untilRev The revision to end at.\n      * @return A map containing the file paths as keys and the corresponding patch text as values.\n      */\n-    fun patchBetween(sinceRev: String, untilRev: String): Map<String, String> {\n-        git.use {\n-            // 获取 sinceRev 和 untilRev 的 ObjectId\n-            val sinceObj: ObjectId = repository.resolve(sinceRev)\n-            val untilObj: ObjectId = repository.resolve(untilRev)\n+    fun patchBetween(sinceRev: String, untilRev: String): Map<String, OptimizePatch> {\n+        // 获取 sinceRev 和 untilRev 的 ObjectId\n+        val sinceObj: ObjectId = repository.resolve(sinceRev)\n+        val untilObj: ObjectId = repository.resolve(untilRev)\n \n-            // 获取两个提交之间的差异（补丁）\n-            val outputStream = ByteArrayOutputStream()\n-            val diffFormatter = DiffFormatter(outputStream)\n-            diffFormatter.setRepository(repository)\n-            diffFormatter.format(sinceObj, untilObj)\n+        // 获取两个提交之间的差异（补丁）\n+        val outputStream = ByteArrayOutputStream()\n+        val diffFormatter = DiffFormatter(outputStream)\n+        diffFormatter.setRepository(repository)\n+        diffFormatter.format(sinceObj, untilObj)\n \n-            summaryFileDiff(diffFormatter, sinceObj, untilObj)\n+        val diffs: List<DiffEntry> = diffFormatter.scan(sinceObj, untilObj)\n+        val patchMap = mutableMapOf<String, OptimizePatch>()\n \n-            // 将补丁转换为 Map\n-            val patchMap = mutableMapOf<String, String>()\n-            outputStream.toString().split(\"\nnew file mode 100644\nindex 0000000..d29effd\n--- /dev/null\n+++ b/code-modules/git-differ/src/main/kotlin/cc/unitmesh/cf/code/OptimizePatch.kt\n@@ -0,0 +1,35 @@\n+package cc.unitmesh.cf.code\n+\n+import kotlinx.serialization.Serializable\n+import org.eclipse.jgit.diff.DiffEntry\n+\n+@Serializable\n+data class OptimizePatch(\n+    val changedLineCount: ChangedLineCount,\n+    val changeType: PatchChangeType,\n+    val content: String,\n+    val path: String,\n+)\n+\n+/**\n+ * from [org.eclipse.jgit.diff.DiffEntry.ChangeType]\n+ */\n+enum class PatchChangeType {\n+    ADD,\n+    MODIFY,\n+    DELETE,\n+    RENAME,\n+    COPY;\n+\n+    companion object {\n+        fun from(changeType: DiffEntry.ChangeType): PatchChangeType {\n+            return when (changeType) {\n+                DiffEntry.ChangeType.ADD -> ADD\n+                DiffEntry.ChangeType.MODIFY -> MODIFY\n+                DiffEntry.ChangeType.DELETE -> DELETE\n+                DiffEntry.ChangeType.RENAME -> RENAME\n+                DiffEntry.ChangeType.COPY -> COPY\n+            }\n+        }\n+    }\n+}\n"
  }
}